name: 'GitHub Actions Error Analysis'
description: 'AI-powered error analysis for failed GitHub Actions workflows'
author: 'Andrew Whitehouse'

inputs:
  openai_api_key:
    description: 'OpenAI API key for error analysis'
    required: true
  workflow_run_id:
    description: 'ID of the failed workflow run to analyze'
    required: true
  repository:
    description: 'Repository where the workflow failed (format: owner/repo)'
    required: true
  branch:
    description: 'Branch where the workflow failed'
    required: false
    default: 'main'
  commit_sha:
    description: 'Commit SHA where the workflow failed'
    required: false
  pr_number:
    description: 'PR number if the workflow was triggered by a PR'
    required: false
  slack_webhook_url:
    description: 'Slack webhook URL for notifications (optional)'
    required: false
  slack_channel:
    description: 'Slack channel override (optional - webhook URL usually contains the channel)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      shell: bash
      run: |
        pip install openai pydantic jinja2 python-dotenv behavioural-contracts dacp

    - name: Download error analysis agents
      shell: bash
      run: |
        git clone https://github.com/aswhitehouse/gh-pipeline-agents.git temp-agents
        cp -r temp-agents/agents ./
        rm -rf temp-agents

    - name: Download full workflow logs
      id: download_logs
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        set -e
        mkdir -p workflow-logs
        WORKFLOW_RUN_ID="${{ inputs.workflow_run_id }}"
        REPO="${{ inputs.repository }}"
        LOGFILE="workflow-logs/full-log.txt"
        # Try GitHub CLI first
        if gh run download "$WORKFLOW_RUN_ID" --repo "$REPO" --dir workflow-logs/; then
          echo "✅ Downloaded logs via gh cli"
        else
          echo "⚠️ gh cli failed, falling back to API"
          curl -H "Authorization: token $GH_TOKEN" -L \
            "https://api.github.com/repos/$REPO/actions/runs/$WORKFLOW_RUN_ID/logs" \
            -o workflow-logs/api-download.zip
          unzip -q workflow-logs/api-download.zip -d workflow-logs/ || true
        fi
        # Concatenate all .txt logs for simplicity
        cat workflow-logs/*.txt > "$LOGFILE" || echo "No .txt logs found"

    - name: Extract failed matrix job logs
      id: extract_failed
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        set -e
        mkdir -p workflow-logs/failed-matrix
        WORKFLOW_RUN_ID="${{ inputs.workflow_run_id }}"
        REPO="${{ inputs.repository }}"

        # Get all jobs with conclusion == failure
        JOBS_JSON=$(gh run view "$WORKFLOW_RUN_ID" --repo "$REPO" --json jobs)
        echo "$JOBS_JSON" > workflow-logs/jobs.json  # For debug

        # For each failed job, download the log
        echo "$JOBS_JSON" | jq -c '.jobs[] | select(.conclusion == "failure") | {name, id: .databaseId}' | while read -r job; do
          JOB_NAME=$(echo "$job" | jq -r .name)
          JOB_ID=$(echo "$job" | jq -r .id)
          SAFE_JOB_NAME=$(echo "$JOB_NAME" | tr ' /()[]:' '____')
          echo "Processing failed job: $JOB_NAME (ID: $JOB_ID)"
          # Download just this job's log
          mkdir -p "workflow-logs/failed-matrix/$SAFE_JOB_NAME"
          if gh run download "$WORKFLOW_RUN_ID" --repo "$REPO" --job "$JOB_NAME" --dir "workflow-logs/failed-matrix/$SAFE_JOB_NAME/"; then
            # Cat all txt logs for this job into a single file
            find "workflow-logs/failed-matrix/$SAFE_JOB_NAME/" -name "*.txt" -exec cat {} + > "workflow-logs/failed-matrix/$SAFE_JOB_NAME/failed-job-log.txt"
            # Grep for failure/traceback/etc, fallback to log tail
            OUTFILE="workflow-logs/failed-matrix/$SAFE_JOB_NAME/trimmed.txt"
            if grep -i -E -A8 -B4 'FAILED|FAIL|AssertionError|Traceback|error|exception|exit code [1-9]|conclusion: failure' "workflow-logs/failed-matrix/$SAFE_JOB_NAME/failed-job-log.txt" | head -200 > "$OUTFILE"; then
              echo "Extracted failure lines for $JOB_NAME"
            else
              tail -200 "workflow-logs/failed-matrix/$SAFE_JOB_NAME/failed-job-log.txt" > "$OUTFILE"
            fi
            # Redact secrets
            sed -i -E 's/(password|secret|token|key|api_key|auth)=[^[:space:]]+/***REDACTED***/gi' "$OUTFILE"
          else
            echo "Failed to download log for $JOB_NAME"
          fi
        done

        # Collate all failed job logs into one
        FINAL_OUT="workflow-logs/final-collated-failures.txt"
        echo "" > "$FINAL_OUT"
        for trimmed in workflow-logs/failed-matrix/*/trimmed.txt; do
          JOBDIR=$(dirname "$trimmed")
          JOBNAME=$(basename "$JOBDIR")
          echo "==== $JOBNAME ====" >> "$FINAL_OUT"
          cat "$trimmed" >> "$FINAL_OUT"
          echo -e "\n" >> "$FINAL_OUT"
        done

        # Limit output to 30000 chars
        TRIMMED=$(head -c 30000 "$FINAL_OUT")
        echo "logs<<EOF" >> $GITHUB_OUTPUT
        echo "$TRIMMED" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Run error analysis agent
      id: analysis
      shell: bash
      env:
        OPENAI_API_KEY: ${{ inputs.openai_api_key }}
      run: |
        RAW_LOGS=$(cat workflow-logs/failed-jobs-only.txt)
        echo "First lines of logs:"
        echo "$RAW_LOGS" | head -40
        dacp run workflow agents/github-actions-error-workflow.yaml \
          --workflow-name quick_error_analysis \
          --input job_name="Failed Workflow" \
          --input workflow_name="Failed Workflow" \
          --input raw_logs="$RAW_LOGS" \
          --input repository="${{ inputs.repository }}" \
          --input branch="${{ inputs.branch }}" \
          --input commit_sha="${{ inputs.commit_sha }}" \
          --input pr_number="${{ inputs.pr_number }}" \
          --output analysis-results.json
        if [ -f analysis-results.json ]; then
          cat analysis-results.json
        fi

    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: error-analysis-results
        path: |
          analysis-results.json
          workflow-logs/
        retention-days: 30

    - name: Send Slack notification
      if: always() && inputs.slack_webhook_url != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        webhook_url: ${{ inputs.slack_webhook_url }}
        channel: ${{ inputs.slack_channel || '' }}
        text: |
          🤖 **GitHub Actions Error Analysis**
          📦 **Repository:** ${{ inputs.repository }}
          🔗 **Workflow Run:** ${{ inputs.workflow_run_id }}
          🌿 **Branch:** ${{ inputs.branch }}
          See artifact for details!
          🔗 <https://github.com/${{ inputs.repository }}/actions/runs/${{ inputs.workflow_run_id }}|View Workflow Run>
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack_webhook_url }}
