name: 'GitHub Actions Error Analysis'
description: 'AI-powered error analysis for failed GitHub Actions workflows'
author: 'Andrew Whitehouse'

inputs:
  openai_api_key:
    description: 'OpenAI API key for error analysis'
    required: true
  workflow_run_id:
    description: 'ID of the failed workflow run to analyze'
    required: true
  repository:
    description: 'Repository where the workflow failed (format: owner/repo)'
    required: true
  branch:
    description: 'Branch where the workflow failed'
    required: false
    default: 'main'
  commit_sha:
    description: 'Commit SHA where the workflow failed'
    required: false
  pr_number:
    description: 'PR number if the workflow was triggered by a PR'
    required: false
  slack_webhook_url:
    description: 'Slack webhook URL for notifications (optional)'
    required: false
  slack_channel:
    description: 'Slack channel for notifications (default: #github-actions)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install DACP and dependencies
      shell: bash
      run: |
        pip install dacp
        pip install openai pydantic jinja2 python-dotenv behavioural-contracts
        
    - name: Download error analysis agents
      shell: bash
      run: |
        # Download the agents from this repository
        git clone https://github.com/aswhitehouse/gh-pipeline-agents.git temp-agents
        cp -r temp-agents/agents ./
        rm -rf temp-agents
        
    - name: Run error analysis
      id: analysis
      shell: bash
      env:
        OPENAI_API_KEY: ${{ inputs.openai_api_key }}
        GH_TOKEN: ${{ github.token }}
      run: |
        # Download logs for the failed workflow
        mkdir -p workflow-logs
        
        # First, check if the workflow run exists and get its status
        echo "Checking workflow run status..."
        echo "Repository: ${{ inputs.repository }}"
        echo "Workflow Run ID: ${{ inputs.workflow_run_id }}"
        echo "Token length: ${#GITHUB_TOKEN}"
        
        # Test token permissions
        echo "Testing token permissions..."
        if curl -H "Authorization: token $GH_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ inputs.repository }}" > /dev/null 2>&1; then
          echo "✅ Token has repository access"
        else
          echo "❌ Token does not have repository access"
        fi
        
        WORKFLOW_STATUS=$(gh run view ${{ inputs.workflow_run_id }} \
          --repo ${{ inputs.repository }} \
          --json status,conclusion,createdAt,updatedAt \
          --jq '.status + ":" + (.conclusion // "null")' 2>/dev/null || echo "not_found:null")
        
        echo "Workflow status: $WORKFLOW_STATUS"
        
        # Try multiple methods to get logs
        LOG_DOWNLOADED=false
        
        # Method 1: Direct download
        echo "Attempting to download logs for workflow run: ${{ inputs.workflow_run_id }}"
        echo "Repository: ${{ inputs.repository }}"
        echo "GH_TOKEN available: $([ -n "$GH_TOKEN" ] && echo "Yes" || echo "No")"
        
        if gh run download ${{ inputs.workflow_run_id }} \
          --repo ${{ inputs.repository }} \
          --dir workflow-logs; then
          echo "✅ Log download successful"
          LOG_DOWNLOADED=true
        else
          echo "❌ Log download failed with exit code: $?"
        fi
        
        # Method 2: GitHub API fallback
        if [ "$LOG_DOWNLOADED" = "false" ]; then
          echo "Trying API fallback method..."
          API_URL="https://api.github.com/repos/${{ inputs.repository }}/actions/runs/${{ inputs.workflow_run_id }}/logs"
          echo "API URL: $API_URL"
          
          if curl -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -L "$API_URL" \
            -o workflow-logs/api-download.zip; then
            echo "✅ API download successful"
            
            # Check what was actually downloaded
            echo "Downloaded file size: $(wc -c < workflow-logs/api-download.zip) bytes"
            echo "Downloaded file content (first 200 chars):"
            head -c 200 workflow-logs/api-download.zip
            echo ""
            
            if unzip -q workflow-logs/api-download.zip -d workflow-logs/ 2>/dev/null; then
              echo "✅ API log extraction successful"
              LOG_DOWNLOADED=true
            else
              echo "❌ API log extraction failed"
              echo "Unzip error details:"
              unzip -t workflow-logs/api-download.zip 2>&1 || true
            fi
          else
            echo "❌ API download failed with exit code: $?"
          fi
        fi
        
        # Method 3: Try GitHub API directly (different approach)
        if [ "$LOG_DOWNLOADED" = "false" ]; then
          echo "Method 3: Trying GitHub API directly..."
          # Try to get logs via curl with the GitHub token
          API_URL="https://api.github.com/repos/${{ inputs.repository }}/actions/runs/${{ inputs.workflow_run_id }}/logs"
          echo "API URL: $API_URL"
          if curl -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -L "$API_URL" \
            -o workflow-logs/api-download.zip; then
            echo "✅ Method 3 successful (API download)"
            
            # Check what was actually downloaded
            echo "Downloaded file size: $(wc -c < workflow-logs/api-download.zip) bytes"
            echo "Downloaded file content (first 200 chars):"
            head -c 200 workflow-logs/api-download.zip
            echo ""
            
            # Try to extract the zip file
            if unzip -q workflow-logs/api-download.zip -d workflow-logs/ 2>/dev/null; then
              echo "✅ Method 3 successful (extraction)"
              LOG_DOWNLOADED=true
            else
              echo "❌ Method 3 failed (extraction)"
              echo "Unzip error details:"
              unzip -t workflow-logs/api-download.zip 2>&1 || true
              rm -f workflow-logs/api-download.zip
            fi
          else
            echo "❌ Method 3 failed (API download)"
          fi
        fi
        
        # Process logs
        TEMP_LOG_FILE="processed-logs.txt"
        echo "" > "$TEMP_LOG_FILE"
        
        if [ "$LOG_DOWNLOADED" = "true" ]; then
          # Extract error information from logs
          for logfile in $(find workflow-logs -name "*.txt" -type f); do
            if grep -q -i "error\|fail\|exception\|fatal\|panic\|abort" "$logfile" 2>/dev/null; then
              echo "=== ERRORS FROM: $(basename "$logfile") ===" >> "$TEMP_LOG_FILE"
              grep -B 2 -A 5 -i "error\|fail\|exception\|fatal" "$logfile" | \
                sed -E 's/(password|secret|token|key|api_key|auth)=[^[:space:]]+/***REDACTED***/gi' | \
                sed -E 's/(https?:\/\/[^[:space:]]*@[^[:space:]]*)/***REDACTED_URL***/gi' | \
                head -50 >> "$TEMP_LOG_FILE" 2>/dev/null || true
              echo -e "\n" >> "$TEMP_LOG_FILE"
            fi
          done
          
          if [ -s "$TEMP_LOG_FILE" ]; then
            RAW_LOGS=$(cat "$TEMP_LOG_FILE")
          else
            RAW_LOGS="No error patterns found in logs"
          fi
        else
          RAW_LOGS="Failed to download logs for workflow run ${{ inputs.workflow_run_id }}"
        fi
        
        rm -f "$TEMP_LOG_FILE"
        
        # Run DACP analysis
        dacp run workflow agents/github-actions-error-workflow.yaml \
          --workflow-name quick_error_analysis \
          --input job_name="Failed Workflow" \
          --input workflow_name="Failed Workflow" \
          --input raw_logs="$RAW_LOGS" \
          --input repository="${{ inputs.repository }}" \
          --input branch="${{ inputs.branch }}" \
          --input commit_sha="${{ inputs.commit_sha }}" \
          --input pr_number="${{ inputs.pr_number }}" \
          --output analysis-results.json
        
        # Output results
        if [ -f analysis-results.json ]; then
          echo "Analysis completed successfully"
          cat analysis-results.json
          
          # Extract summary for Slack notification
          SUMMARY=$(cat analysis-results.json | jq -r '.context.output.developer_message.summary // "No summary available"' 2>/dev/null || echo "Analysis completed but summary could not be extracted")
          ROOT_CAUSE=$(cat analysis-results.json | jq -r '.context.output.analysis_result.root_cause // "Unknown"' 2>/dev/null || echo "Unknown")
          CATEGORY=$(cat analysis-results.json | jq -r '.context.output.analysis_result.error_category // "Unknown"' 2>/dev/null || echo "Unknown")
          
          # Create formatted summary for Slack
          SLACK_SUMMARY="**Root Cause:** $ROOT_CAUSE\n**Category:** $CATEGORY\n**Summary:** $SUMMARY"
          
          echo "slack_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SLACK_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
        else
          echo "Analysis failed"
          echo "slack_summary=Analysis failed - no results generated" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: error-analysis-results
        path: |
          analysis-results.json
          workflow-logs/
        retention-days: 30
        
    - name: Send Slack notification
      if: always() && inputs.slack_webhook_url != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        webhook_url: ${{ inputs.slack_webhook_url }}
        channel: ${{ inputs.slack_channel || '#github-actions' }}
        text: |
          🤖 **GitHub Actions Error Analysis**
          
          **Repository:** ${{ inputs.repository }}
          **Workflow Run:** ${{ inputs.workflow_run_id }}
          **Branch:** ${{ inputs.branch }}
          
          ${{ steps.analysis.outputs.slack_summary || 'Analysis completed but no summary available.' }}
          
          🔗 <https://github.com/${{ inputs.repository }}/actions/runs/${{ inputs.workflow_run_id }}|View Workflow Run>
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack_webhook_url }} 